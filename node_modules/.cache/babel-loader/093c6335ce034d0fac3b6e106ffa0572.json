{"ast":null,"code":"export default {\n  name: \"Lyrics\",\n\n  data() {\n    return {\n      song: []\n    };\n  },\n\n  methods: {\n    async fetchSong(id) {\n      const res = await fetch(`../api/songs/${id}`);\n      const data = await res.json();\n      return data;\n    },\n\n    nameWithComma(index) {\n      if (index !== this.song.artists.length - 1) {\n        return `${this.song.artists[index]}, `;\n      } else {\n        return this.song.artists[index];\n      }\n    }\n\n  },\n\n  async created() {\n    const songId = await this.$route.params.songId;\n    this.song = await this.fetchSong(songId);\n  }\n\n};","map":{"version":3,"mappings":"AAgBA,eAAe;AACXA,MAAI,EAAE,QADK;;AAEXC,MAAI,GAAG;AACH,WAAO;AACHC,UAAI,EAAE;AADH,KAAP;AAGH,GANU;;AAOXC,SAAO,EAAE;AACL,UAAMC,SAAN,CAAgBC,EAAhB,EAAoB;AAChB,YAAMC,GAAE,GAAI,MAAMC,KAAK,CAAE,gBAAeF,EAAG,EAApB,CAAvB;AACA,YAAMJ,IAAG,GAAI,MAAMK,GAAG,CAACE,IAAJ,EAAnB;AAEA,aAAOP,IAAP;AACH,KANI;;AAOLQ,iBAAa,CAACC,KAAD,EAAO;AAChB,UAAIA,KAAI,KAAM,KAAKR,IAAL,CAAUS,OAAV,CAAkBC,MAAlB,GAAyB,CAAvC,EAA0C;AACtC,eAAQ,GAAE,KAAKV,IAAL,CAAUS,OAAV,CAAkBD,KAAlB,CAAyB,IAAnC;AACJ,OAFA,MAEO;AACH,eAAO,KAAKR,IAAL,CAAUS,OAAV,CAAkBD,KAAlB,CAAP;AACJ;AACJ;;AAbK,GAPE;;AAsBX,QAAMG,OAAN,GAAgB;AACZ,UAAMC,MAAK,GAAI,MAAM,KAAKC,MAAL,CAAYC,MAAZ,CAAmBF,MAAxC;AACA,SAAKZ,IAAL,GAAY,MAAM,KAAKE,SAAL,CAAeU,MAAf,CAAlB;AACJ;;AAzBW,CAAf","names":["name","data","song","methods","fetchSong","id","res","fetch","json","nameWithComma","index","artists","length","created","songId","$route","params"],"sourceRoot":"","sources":["/home/jacklinde/Documents/GitHub/stuko/src/views/Lyrics.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <h2>{{song.title}}</h2>\n        <h4><span v-for=\"(artist, index) in song.artists\" :key=\"index\">{{nameWithComma(index)}}</span></h4>\n        <p> {{song.lyrics}}</p>\n    </div>\n</template>\n\n<style scoped>\np {\n    text-align: left;\n    white-space: pre-wrap;\n}\n</style>\n\n<script>\nexport default {\n    name: \"Lyrics\",\n    data() {\n        return {\n            song: []\n        }\n    },\n    methods: {\n        async fetchSong(id) {\n            const res = await fetch(`../api/songs/${id}`);\n            const data = await res.json();\n\n            return data;\n        },\n        nameWithComma(index){\n            if (index !== this.song.artists.length-1) {\n                return `${this.song.artists[index]}, `\n            } else {\n                return this.song.artists[index]\n            }\n        }\n    },\n    async created() {\n        const songId = await this.$route.params.songId\n        this.song = await this.fetchSong(songId)\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}